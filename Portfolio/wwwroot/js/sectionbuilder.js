//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v9.10.57.0 (Newtonsoft.Json v11.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------
export class SubSection {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.title = data["Title"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SubSection();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["Title"] = this.title;
        return data;
    }
}
export class IContent {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        this._discriminator = "IContent";
    }
    init(data) {
        if (data) {
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "TextContent") {
            let result = new TextContent();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "CodeContent") {
            let result = new CodeContent();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "ExampleContent") {
            let result = new ExampleContent();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "ImageContent") {
            let result = new ImageContent();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'IContent' cannot be instantiated.");
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator;
        return data;
    }
}
export class TextContent extends IContent {
    constructor(data) {
        super(data);
        this._discriminator = "TextContent";
    }
    init(data) {
        super.init(data);
        if (data) {
            this.text = data["Text"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "CodeContent") {
            let result = new CodeContent();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "ExampleContent") {
            let result = new ExampleContent();
            result.init(data);
            return result;
        }
        let result = new TextContent();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["Text"] = this.text;
        super.toJSON(data);
        return data;
    }
}
export class CodeContent extends TextContent {
    constructor(data) {
        super(data);
        this._discriminator = "CodeContent";
    }
    init(data) {
        super.init(data);
        if (data) {
            this.type = data["Type"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "ExampleContent") {
            let result = new ExampleContent();
            result.init(data);
            return result;
        }
        let result = new CodeContent();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["Type"] = this.type;
        super.toJSON(data);
        return data;
    }
}
export class ExampleContent extends CodeContent {
    constructor(data) {
        super(data);
        this._discriminator = "ExampleContent";
    }
    init(data) {
        super.init(data);
        if (data) {
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ExampleContent();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}
export class ImageContent extends IContent {
    constructor(data) {
        super(data);
        this._discriminator = "ImageContent";
    }
    init(data) {
        super.init(data);
        if (data) {
            this.path = data["Path"];
            this.alt = data["Alt"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ImageContent();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["Path"] = this.path;
        data["Alt"] = this.alt;
        super.toJSON(data);
        return data;
    }
}
export class SectionBuilder {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.title = data["Title"];
            if (data["SubSections"] && data["SubSections"].constructor === Array) {
                this.subSections = [];
                for (let item of data["SubSections"])
                    this.subSections.push(SubSection.fromJS(item));
            }
            if (data["Content"] && data["Content"].constructor === Array) {
                this.content = [];
                for (let item of data["Content"])
                    this.content.push(IContent.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SectionBuilder();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["Title"] = this.title;
        if (this.subSections && this.subSections.constructor === Array) {
            data["SubSections"] = [];
            for (let item of this.subSections)
                data["SubSections"].push(item.toJSON());
        }
        if (this.content && this.content.constructor === Array) {
            data["Content"] = [];
            for (let item of this.content)
                data["Content"].push(item.toJSON());
        }
        return data;
    }
}
//# sourceMappingURL=sectionbuilder.js.map