
@{
    ViewData["Title"] = "Bootstrap";
}
<div class="container">
    <div class="row flex-row-reverse">
        @await Html.PartialAsync("Sidebar", new List<(string, string)>() {
       ("Intro", "#Introduction"),
       ("Installation", "#Install"),
       ("Containers", "#Containers"),
       ("Grids", "#Grids"),
       ("Navigation Bars", "#Navbar"),
        })
        <div class="col">
            <h2>Bootstrap</h2>
            <a name="Intro"></a>
            <!-- #region Intro -->
            <h3>Introduction</h3>
            <p>
                Bootstrap is framework for building responsive, mobile-first sites.
                Bootstrap is developed mobile first, a strategy in which we optimize code for mobile devices first and then scale up components as necessary using CSS media queries.
                A detailed introduction can be found <a href="https://getbootstrap.com/docs/4.0/getting-started/introduction/">here</a>.
                All of the following is tested using Bootstrap 4.0.0 and sometimes it is mentioned if something had changed from bootstrap 3 but not tested with an older version.
            </p>

            <a name="Install"></a>
            <h3>Installation</h3>
            <p>
                This guid follows <a href="https://stackoverflow.com/questions/48481003/how-to-use-bootstrap-4-in-asp-net-core">this guide</a> from stack overflow and targets ASP.NET projects.
                As for now when a new project is created bootstrap v3.3.7 is allready referenced in the _Layout.cshtml and the according files are located in the wwwroot's lib folder, but can be replaced with a newer version and a more sophisticated way is described in the article mention above.
                In order to install Bootstrap we need to <a href="https://getbootstrap.com/docs/4.0/getting-started/download/">download the compiled files</a>.
                We also need jQuery for which we need a <a href="https://jquery.com/download/">single file from the download site</a>. These files then need to be referenced from the project in the _Layout.cshtml.
            </p>
            <!-- #endregion -->
            <!-- #region Containers -->
            <a name="Containers"></a>
            <h3>Containers</h3>
            Bootstrap uses responsive breakpoints. These breakpoints are mostly based on minimum viewport widths. The media query ranges can be found <a href="https://getbootstrap.com/docs/4.0/layout/overview/#responsive-breakpoints">here</a>. Containers are automaticaly resized according to these ranges.
            <h4>container</h4>
            <div class="breadcrumb">
                <p>
                    The container tag makes it incrementaly resize depending on the viewport width.
                </p>
                <div class="container">
<pre><code class="html">&lt;div class="container"&gt;
...
&lt;/div&gt;</code></pre>
                </div>
                <div class="container example"></div>
            </div>

            <h4>container-fluid</h4>
            <div class="breadcrumb">
                <p>
                    The container tag makes it continuously resize.
                </p>
                <div class="container">
<pre><code class="html">&lt;div class="container-fluid"&gt;
...
&lt;/div&gt;</code></pre>
                </div>
                <div class="container-fluid example"></div>
            </div>

            <!-- #endregion -->
            <!-- #region Grid -->
            <a name="Grids"></a>
            <h3>Grids</h3>
            <p>
                Bootstrap’s grid system uses a series of <font class="font-example">containers</font>, <font class="font-example-row">rows</font>, and <font class="font-example-col">columns</font>(colors indicate the borders of these elements) to layout and align content.
                Content should only be placed in columns not in rows, and they have to be defined within a container.
                Also columns should only be placed in rows, because they counteract the the paddings of columns with negative margins.
                </>
            </p>
            <h4>Equaly sized columns</h4>
            <div class="breadcrumb">
                <p>
                    If you need columns that simply have the same size, they are defined in a row as follows:
                </p>
                <div class="container">
<pre><code class="html">&lt;div class="row"&gt;
    &lt;div class="col"&gt;
    ...
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
                </div>
                <div class="container">
                    <div class="row example-row">
                        <div class="col example-col">
                            1 of 2
                        </div>
                        <div class="col example-col">
                            2 of 2
                        </div>
                    </div>
                </div>
            </div>
            <h4>Different column widths</h4>
            <div class="breadcrumb">
                <p>
                    In order to make a column wider then others, the number of columns it spans can be defined too.
                    The grid system divides the viewport into 12 columns.
                    So if u specify a column width the remaining columns are automatically sized to fill up the remaining column.
                    The following specifies the center column to span 6 columns using the <code class="html">col-6</code> class.
                </p>

                <div class="container">
                    <div class="row example-row">
                        <div class="col example-col">
                            1 of 3
                        </div>
                        <div class="col-6 example-col">
                            2 of 3 (wider)
                        </div>
                        <div class="col example-col">
                            3 of 3
                        </div>
                    </div>
                </div>
            </div>


            <h4>Variable column widths</h4>
            <div class="breadcrumb">
                <p>
                    Use <code class="html">col-{breakpoint}-auto</code> classes to size columns based on the natural width of their content.
                </p>

                <div class="container">
                    <div class="row example-row">
                        <div class="col example-col">
                            1 of 3
                        </div>
                        <div class="col-auto example-col">
                            2 of 3 (variable)
                        </div>
                        <div class="col example-col">
                            3 of 3
                        </div>
                    </div>
                </div>
            </div>

            <h4>Alignment</h4>
            <div class="breadcrumb">
                <p>
                    To align your columns u can additionaly specify the <code class="html">align-items-{alignment}</code> class for hotrizontal layout at the column tag
                    and the <code>justify-content-{alignment}</code> class for vertical alignment for rows.
                    Here the alignment can be one of the following:
                    <ul>
                        <li>start</li>
                        <li>center</li>
                        <li>end</li>
                    </ul>
                </p>
                <div class="container">
                    <pre><code>&lt;div class="container"&gt;
    &lt;div class="row example-row align-items-end justify-content-end" style="min-height:100px"&gt;
        &lt;div class="col-xs example-col"&gt;
            Vertical end, horizontal end
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="row example-row align-items-start justify-content-center" style="min-height:100px"&gt;
        &lt;div class="col-xs example-col"&gt;
            Vertical start, horizontal center
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;</code></pre>
                </div>

                <div class="container">
                    <div class="row example-row align-items-end justify-content-end" style="min-height:100px">
                        <div class="col-xs example-col">
                            Vertical end, horizontal end
                        </div>
                    </div>
                    <div class="row example-row align-items-start justify-content-center" style="min-height:100px">
                        <div class="col-xs example-col">
                            Vertical start, horizontal center
                        </div>
                    </div>
                </div>
            </div>
            <!-- #endregion Grid-->
            <!-- #region Navbar -->
            <a name="Navbar"></a>
            <h3>Navbar</h3>
            <div class="breadcrumb">
                <p>
                    As discussed before when creating a ASP.NET MVC 6 project the initial version of bootstrap is not 4.0.0.
                    This means that the generated navbar does not display correct.
                    The navbar code is located in the Views &gt; Shared &gt; _Layout.cshtml shich is shared by all Views(if it contains a _ViewStart.cshtml file that defines it(more on that in the
                    <a asp-area="MVC6" asp-controller="Home" asp-action="Index">MVC-6 cheatsheet</a>))
                    To change this to behave correct, we alter a few things, where <a href="https://stackoverflow.com/questions/46672365/boostrap-4-navbar-does-not-work">this article</a> was very helpful.
                    The main changes where the following:
                    <ul>
                        <li>
                            The sizing of the navbar is defined by the <code>navbar-expand-{size}</code> class.
                        </li>
                        <li>
                            The button class to expand the navbar on small viewports is now called <code>navbar-toggler</code> instead of <code>navbar-toggle</code>.
                        </li>
                        <li>
                            Use the <code>navbar-toggler-icon</code> class in the first span inside the navbar button to display the familliar icon.
                        </li>
                        <li>
                            To make the navbar stay on top of your page even when scrolled down, the navbar can use the <code>fixed-top</code> class (note the change from bootstrap 3's <code>navbar-fixed-top</code>).
                        </li>
                    </ul>
                </p>
            </div>
            <!-- #endregion -->
            <!-- #region Sidebar-->
            <!-- #endregion -->

        </div>
    </div>
</div>